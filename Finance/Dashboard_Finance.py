# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KPZgATUAJ6jtRtYnHtJ05-7-5nbc6xat
"""

from dash import Dash, dcc, html
from dash.dependencies import Input, Output
import dash_bootstrap_components as dbc
import plotly.express as px
import pandas as pd

file_path = 'Financial_Model.xlsx'

def create_figure(fig_number):
    if fig_number == 1:
        timing = pd.read_excel(file_path, sheet_name='IS', skiprows=1, nrows=1, header=None)
        data = pd.read_excel(file_path, sheet_name='IS', skiprows=37, nrows=3, header=None)
        data = data.drop(data.columns[[0, 3, 4, 5]], axis=1)
        timing = timing.drop(timing.columns[[0, 3, 4, 5]], axis=1)

        quarters = timing.iloc[0, 2:].tolist()
        values_people = data.iloc[0, 2:].astype(float).tolist()

        return px.line(x=quarters, y=values_people, title='Охват аудитории',
                       labels={'x': 'Период (квартал)', 'y': 'Количество человек (млн.)'})

    elif fig_number == 2:
        timing = pd.read_excel(file_path, sheet_name='IS', skiprows=1, nrows=1, header=None)
        data = pd.read_excel(file_path, sheet_name='IS', skiprows=37, nrows=3, header=None)
        data = data.drop(data.columns[[0, 3, 4, 5]], axis=1)
        timing = timing.drop(timing.columns[[0, 3, 4, 5]], axis=1)

        quarters = timing.iloc[0, 2:].tolist()
        values_price = data.iloc[1, 2:].astype(float).tolist()

        return px.line(x=quarters, y=values_price, title='Аппроксимированная цена курса на человека',
                       labels={'x': 'Период (квартал)', 'y': 'Миллионы евро (€)'})

    elif fig_number == 3:
        timing = pd.read_excel(file_path, sheet_name='IS', skiprows=1, nrows=1, header=None)
        data_4 = pd.read_excel(file_path, sheet_name='DCF', skiprows=17, nrows=1, header=None)
        data_4 = data_4.drop(data_4.columns[[0, 3, 4, 5]], axis=1)

        values_DCF_1 = data_4.iloc[0, 2:14].astype(float).tolist()
        timing_1 = timing.iloc[0, 2:14].tolist()

        colors = ['red'] * 11 + ['green']
        return px.bar(x=timing_1, y=values_DCF_1, title='Значение Accumulated DCF, первый срок',
                      labels={'x': 'Период (квартал)', 'y': 'Миллионы евро (€)'}, color_discrete_sequence=colors)

    elif fig_number == 4:
        timing = pd.read_excel(file_path, sheet_name='IS', skiprows=1, nrows=1, header=None)
        data_4 = pd.read_excel(file_path, sheet_name='DCF', skiprows=17, nrows=1, header=None)
        data_4 = data_4.drop(data_4.columns[[0, 3, 4, 5]], axis=1)

        values_DCF_2 = data_4.iloc[0, 14:31].astype(float).tolist()
        timing_2 = timing.iloc[0, 14:31].tolist()

        return px.bar(x=timing_2, y=values_DCF_2, title='Значение Accumulated DCF, второй срок',
                      labels={'x': 'Период (квартал)', 'y': 'Миллионы евро (€)'}, color_discrete_sequence=['green'])

    elif fig_number == 5:
        timing = pd.read_excel(file_path, sheet_name='IS', skiprows=1, nrows=1, header=None)
        data = pd.read_excel(file_path, sheet_name='IS', skiprows=37, nrows=3, header=None)
        data = data.drop(data.columns[[0, 3, 4, 5]], axis=1)
        timing = timing.drop(timing.columns[[0, 3, 4, 5]], axis=1)

        quarters = timing.iloc[0, 2:].tolist()
        values_returns = data.iloc[2, 2:].astype(float).tolist()

        fig = px.line(x=quarters, y=values_returns, title='Суммарная выручка',
                      labels={'x': 'Период (квартал)', 'y': 'Миллионы евро (€)'})
        return fig

    elif fig_number == 6:
        timing = pd.read_excel(file_path, sheet_name='IS', skiprows=1, nrows=1, header=None)
        data_2 = pd.read_excel(file_path, sheet_name='IS', skiprows=133, nrows=1, header=None)
        data_2 = data_2.drop(data_2.columns[[0, 3, 4, 5]], axis=1)
        timing = timing.drop(timing.columns[[0, 3, 4, 5]], axis=1)

        quarters = timing.iloc[0, 2:].tolist()
        values_expenses = data_2.iloc[0, 2:].astype(float).tolist()

        fig = px.line(x=quarters, y=values_expenses, title='Суммарные издержки',
                      labels={'x': 'Период (квартал)', 'y': 'Миллионы евро (€)'})
        return fig

    elif fig_number == 7:
        timing = pd.read_excel(file_path, sheet_name='IS', skiprows=1, nrows=1, header=None)
        data_3 = pd.read_excel(file_path, sheet_name='P&L', skiprows=14, nrows=1, header=None)
        data_3 = data_3.drop(data_3.columns[[0, 3, 4, 5]], axis=1)
        timing = timing.drop(timing.columns[[0, 3, 4, 5]], axis=1)

        quarters = timing.iloc[0, 2:].tolist()
        values_EBIT = data_3.iloc[0, 2:].astype(float).tolist()

        fig = px.line(x=quarters, y=values_EBIT, title='Значение EBIT',
                      labels={'x': 'Период (квартал)', 'y': 'Миллионы евро (€)'})
        return fig

app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

app.layout = dbc.Container([
    html.H1('Выбор графика', className='text-center my-4'),

    dbc.Row([
        dbc.Col([
            dcc.Dropdown(
                id='graph-selector',
                options=[
                    {'label': '1. Охват аудитории', 'value': 1},
                    {'label': '2. Аппроксимированная цена за курс на человека', 'value': 2},
                    {'label': '3. DCF первый срок', 'value': 3},
                    {'label': '4. DCF второй срок', 'value': 4},
                    {'label': '5. Суммарная выручка', 'value': 5},
                    {'label': '6. Суммарные издержки', 'value': 6},
                    {'label': '7. EBIT', 'value': 7}
                ],
                value=1,
                clearable=False
            )
        ], md=12)
    ]),

    dbc.Row([
        dbc.Col(dcc.Graph(id='main-graph'), md=12)
    ], className='mt-4')
], fluid=True)

@app.callback(
    Output('main-graph', 'figure'),
    [Input('graph-selector', 'value')]
)
def update_graph(selected_number):
    return create_figure(selected_number)

if __name__ == '__main__':
    app.run(debug=True)